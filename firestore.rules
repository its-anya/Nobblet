rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Basic authentication check
    function isAuthenticated() {
      return request.auth != null && request.auth.uid != null;
    }
    
    // Check if user is admin - improved version with error handling
    function isAdmin() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    
    // Check if user is a participant in the chat
    function isParticipant(resource) {
      return isAuthenticated() && 
             (resource.data.isPublic == true || 
              resource.data.participants.hasAny([request.auth.uid]));
    }
    
    // Check if user is the author of a message
    function isAuthor(resource) {
      return isAuthenticated() && 
             resource.data.senderId == request.auth.uid;
    }
    
    // User profiles
    match /users/{userId} {
      // Allow reading user profile for authentication purposes
      allow read: if true;  // Allow reading user data for login lookup
      
      // Allow users to create and edit their own profile when authenticated
      allow create, update: if isAuthenticated() && 
                             (request.auth.uid == userId ||
                             isAdmin()) &&
                             request.resource.data.keys().hasAll(['username', 'usernameLowerCase', 'email']);
      
      // Allow initial user creation
      allow create: if request.auth.uid == userId;
      
      // Allow list queries on users collection (needed for contacts)
      match /{document=**} {
        allow read: if isAuthenticated();
      }
    }
    
    // Messages
    match /messages/{messageId} {
      // Allow reading if user is authenticated and either:
      // 1. The message is public, or
      // 2. The user is a participant in the conversation
      // 3. The user is an admin
      allow read: if isAuthenticated() && 
                   (resource.data.isPublic == true || 
                    (resource.data.participants != null && 
                     resource.data.participants.hasAny([request.auth.uid])) ||
                    isAdmin());
      
      // Allow creating if user is authenticated and either:
      // 1. Creating a public message, or
      // 2. Creating a message where they are a participant
      allow create: if isAuthenticated() && 
                     (request.resource.data.isPublic == true || 
                      (request.resource.data.participants != null &&
                       request.resource.data.participants.hasAny([request.auth.uid])));
      
      // Simplified update rule for reactions
      allow update: if isAuthenticated() && 
                    // Either participating in the conversation or admin
                    ((resource.data.isPublic == true || 
                      (resource.data.participants != null && 
                       resource.data.participants.hasAny([request.auth.uid])) ||
                      isAdmin()) &&
                    // And only changing reactions, nothing else
                    (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['reactions'])));
      
      // Allow deletion if the user is the author of the message or an admin
      allow delete: if isAuthor(resource) || isAdmin();
      
      // Allow list queries on messages for contacts
      allow list: if isAuthenticated();
    }
    
    // Admin specific collection
    match /reports/{reportId} {
      // Only admins can access reports
      allow read, write: if isAdmin();
      // Explicitly deny access for non-admins
      allow read, write: if !isAdmin() == false;
    }
    
    // Admin statistics collection
    match /admin_stats/{statId} {
      // Only admins can access admin statistics
      allow read, write: if isAdmin();
      // Explicitly deny access for non-admins
      allow read, write: if !isAdmin() == false;
    }
    
    // Reported content collection
    match /reported_content/{contentId} {
      // Only admins can access reported content
      allow read, write: if isAdmin();
      // Explicitly deny access for non-admins
      allow read, write: if !isAdmin() == false;
    }
    
    // Admin panel access control
    match /admin_access/{docId} {
      // Only admins can access this collection
      allow read, write: if isAdmin();
      // Explicitly deny access for non-admins
      allow read, write: if !isAdmin() == false;
    }
    
    // Default deny
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 